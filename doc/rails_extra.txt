*rails_extra.txt*	Extra tools to complement vim-rails

==============================================================================
CONTENTS                                        *rails_extra*   *rails_extra-contents*

    Installation................................: |rails_extra-installation|
    Usage.......................................: |rails_extra-usage|
    Settings....................................: |rails_extra-settings|
    Advanced....................................: |rails_extra-advanced|
    Reliability.................................: |rails_extra-reliability|
    Issues......................................: |rails_extra-issues|


==============================================================================
INSTALLATION                                          *rails_extra-installation*

The easiest way to install the plugin is with a plugin manager:

- vim-plug: https://github.com/junegunn/vim-plug
- Vundle:   https://github.com/VundleVim/Vundle.vim

If you use one, just follow the instructions in its documentation.

Note that this plugin depends on Tim Pope's vim-rails:
https://github.com/tpope/vim-rails. Be sure to install that one as well, or
rails_extra won't work.

You can install the plugin yourself using Vim's |packages| functionality by
cloning the project (or adding it as a submodule) under
`~/.vim/pack/<any-name>/start/`. For example:
>
    git clone https://github.com/AndrewRadev/rails_extra.vim \
        ~/.vim/pack/_/start/rails_extra
<
This should automatically load the plugin for you on Vim start. Alternatively,
you can add it to `~/.vim/pack/<any-name>/opt/` instead and load it in your
.vimrc manually with:
>
    packadd rails_extra
<
If you'd rather not use git, you can download the files from the "releases"
tab and unzip them in the relevant directory:
https://github.com/AndrewRadev/rails_extra.vim/releases.


==============================================================================
USAGE                                                        *rails_extra-usage*

The plugin defines some extra tools to work with Rails projects. Some of them
might be a bit hacky, use heuristics, or support non-standard Rails tools,
which might mean they don't necessarily make sense for vim-rails PRs.

Edit commands ~

There are several extra editing commands you can use that are similar to what
vim-rails provides. These are defined as buffer-local commands in rails
project files, just like vim-rails does it. If you'd like to define them
globally, see the |rails_extra-advanced| section below.
>
    :Efactory <factory-name>
<
This will attempt to jump to a `factory_bot`
(https://github.com/thoughtbot/factory_bot) factory definition. You can use
vim-projectionist for factories, but that approach will only pick out
factories in separate files. This `:Efactory` command does some extra work to
parse all the factory bot files for definitions -- this will mean it's slower,
so your mileage might vary.

>
    :Epath /path/to/route
    :Epath http://localhost:3000/path/to/route
    :Epath https://production-url.com/path/to/route
<

This will use the `rails#app().routes()` function from vim-rails to get all
the routes of the application and pattern-match the URL to one of them,
jumping to the relevant controller/action. It tab-completes with all the
paths, so you could navigate manually, or you could copy-paste the browser URL
into your Vim.

Go to file ~

Vim-rails makes the |gf| family of mappings (|CTRL-W_f|, |CTRL-W_gf|, etc)
extremely powerful, allowing you to |gf| from a model name into that model,
jump through partials and a lot more. Rails-extra tries to add a few more
tools to that mix.

Translations:
>
    # gf will try to jump to that key in `config/locale/en.yml`:
    t("foo.bar.baz")
<
Routes in `config/routes.rb` (doesn't work for everything, but a few examples):
>
    resources :users

    get 'route', to: 'users#profile'

    controller :home do
      get '/example', :action => 'example_action'
    end
<
Factory bot factories -- cursor on the factory name:
>
    create :user, :admin, name: 'Example'

    build_stubbed :product

    attributes_for :post
<
Custom RSpec matchers -- cursor on the matcher:
>
    # Would jump to: spec/support/matchers/wibble_and_wobble_matcher.rb
    expect(timey_wimey_stuff).to wibble_and_wobble(42)
<

Expect these to not quite work at 100% all the time. There's lots of ways to
configure and organize code, so the above examples make guesses based on my
own experience. If you have a different setup, please open a github issue and
describe your case -- I might be able to support it.


==============================================================================
SETTINGS                                                  *rails_extra-settings*

                                                   *g:rails_extra_edit_commands*
>
    let g:rails_extra_edit_commands = 0
<
Default value: 1

Whether the plugin should define its buffer-local commands. True (1) by
default, but you can set it to false (0) if you don't care about the commands
or they get in the way of the ones you've defined using vim-projectionist.

                                                              *g:rails_extra_gf*
>
    let g:rails_extra_gf = 0
<
Default value: 1

Whether the plugin should extend vim-rails' gf mapping with its own extras.
Set to true (1), but you can set it to false (0) if you run into problems with
the gf extensions or don't care for them. Consider opening a github issue
describing your problem -- it might be fixable.


==============================================================================
ADVANCED                                                  *rails_extra-advanced*

If you'd like to be able to run the edit commands on empty buffers, you could
define them globally. This means you'd be polluting the global namespace,
causing problems if you have other kinds of project you'd like to work on.

This might make sense in 1) a project-specific file that only activates when
you decide to "edit a project" -- it's what I do. Or, if you 2) name your
global commands in a rails-specific way.

For each editing command defined by this plugin, there's going to be two
functions that let it work:
>
    rails_extra#edit#<Target>
    rails_extra#edit#Complete<Target>
<
Where "Target" is one of the supported commands, currently "Factory" and
"Path", and "Targets" is the pluralized version of that word.

So, if you wanted to define global commands called `RailsEdit<Target>`, you
could put this in your .vimrc:
>
    command! -nargs=* -complete=custom,rails_extra#edit#CompleteFactories
        \ RailsEditFactory call rails_extra#edit#Factory(<q-args>)

    command! -nargs=* -complete=custom,rails_extra#edit#CompletePaths
        \ RailsEditPath call rails_extra#edit#Path(<q-args>)
<
These should work just as well as the buffer-local ones, with completion and
everything.

==============================================================================
RELIABILITY                                            *rails_extra-reliability*

Part of the reason this plugin exists is simple "Not Invented Here" syndrome
-- it's easier for me to work with my own code than to adjust to somebody
else's style, especially when it comes to lots of small ad-hoc changes.

However, it's also possibly not "worth" including in vim-rails -- some
features are hacky and/or potentially slow.

For example, `gf` on a route uses regexes to figure out the controller/action
pair to jump to. This can never be 100% precise, since you can do stuff like
`resource "#{variable}_foo"`, for example. But there's probably even static
patterns that the plugin doesn't get. It could maybe run `rake routes` or
evaluate the routes file. Vim-rails evaluates ruby code to access routes,
according to the docs. But this seems way too complicated to me, and regexes
seem to work often enough for my own purposes.

Factory completion can also be potentially slow -- the plugin tries to read
all the factory files, line by line, and collect factories by regex. It's
never been slow for me, but it totally could be. If you use vim-projectionist
with one file per factory, it would do the same job in a much more efficient
way. But I often work with projects with multiple factories per file, and
that's why this tool exists.

In the end, it's worked well enough for me in practice, with no catastrophic
failures so far. The worst that has happened is that some `gf` on a route
hasn't worked and I'd written it down to implement later and navigated to the
right place manually, which is fine by me. Your mileage may vary -- please
open a github issue if you hit a problem.


==============================================================================
ISSUES                                                      *rails_extra-issues*

Any issues and suggestions are very welcome on the github bugtracker:
https://github.com/AndrewRadev/rails_extra.vim/issues


vim:tw=78:sw=4:ft=help:norl:
